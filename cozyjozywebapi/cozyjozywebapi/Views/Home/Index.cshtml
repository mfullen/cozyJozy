@{
    Layout = "~/Views/Shared/_Layout2.cshtml";
    Response.Headers["X-UA-Compatible"] = "IE=10";
}


@section SPAViews {
    @Html.Partial("_Home")
    @Html.Partial("_Login")
    @Html.Partial("_FeedingStats")
    @Html.Partial("_DiaperStats")
    @Html.Partial("Developer")
    @Html.Partial("_ChildMgt")
    @Html.Partial("_ChildPermissions")
    @Html.Partial("_Feeding")
    @Html.Partial("_DiaperChanges")
    @Html.Partial("_SleepMgt")
    @Html.Partial("_Measurements")

    @Html.Partial("_Register")
    @Html.Partial("_RegisterExternal")
    @Html.Partial("_Manage")
}
@section Scripts{
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/app")
    @Scripts.Render("~/bundles/materialThemeJs")


}

<script>
    $(document).ready(function () {
        $(document).ajaxStart(function () {
            $('#loadingDiv').show();
        });
        $(document).ajaxStop(function () {
            $('#loadingDiv').hide();
        });

        $(document).ajaxError(function (event, xhr, textStatus, err) {
            switch (xhr.status) {
                case 401:
                case 403:
                    app.user(null);
                    app.navigateToLoggedOff();
                    app.errors.push('Your request could not be authenicated. Please login again!');
                    break;
                default:
                    //xhr.responseJSON.modelState[""][0]
                    var errorMessage = 'Error: ' + xhr.status + ' ' + err;
                   
                    if (xhr.responseJSON.modelState) {
                        var errorList = xhr.responseJSON.modelState[""];
                        if (errorList && errorList.length > 0) {
                            errorMessage = errorList[0];
                        }
                    }
                    else if (xhr.responseJSON) {
                        errorMessage = xhr.responseJSON;
                    }
                    app.errors.push(errorMessage);
                    break;
            }
        });


        ko.bindingHandlers.datetimepicker = {
            init: function (element, valueAccessor, allBindings) {
                var options = {
                    format: 'MM/DD/YYYY hh:mm A',
                    defaultDate: ko.unwrap(valueAccessor())
                };

                ko.utils.extend(options, allBindings().dateTimePickerOptions);

                $(element).datetimepicker(options).on("dp.change", function (evntObj) {
                    var observable = valueAccessor();
                    if (evntObj.timeStamp !== undefined) {
                        var picker = $(this).data("DateTimePicker");
                        var d = picker.date();

                        if (d !== null) {
                            var date = d.format(options.format);
                            observable(date);
                        } else {
                            observable(d);
                        }
                    }
                });
            },
            update: function (element, valueAccessor, allBindingsAccessor) {
                //var value = ko.unwrap(valueAccessor());
                //$(element).datetimepicker('date', value || '');

                //when the view model is updated, update the widget
                if ($(element).data("DateTimePicker")) {
                    $(element).datetimepicker("remove");
                    var value = ko.unwrap(valueAccessor());

                    $(element).data("DateTimePicker").date(moment(value) || '');
                }

            }
        };

        ko.bindingHandlers.sliderValue = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                var params = valueAccessor();

                // Check whether the value observable is either placed directly or in the paramaters object.
                if (!(ko.isObservable(params) || params['value']))
                    throw "You need to define an observable value for the sliderValue. Either pass the observable directly or as the 'value' field in the parameters.";

                // Identify the value and initialize the slider
                var valueObservable;
                if (ko.isObservable(params)) {
                    valueObservable = params;
                    $(element).slider({ value: ko.unwrap(params) });
                }
                else {
                    valueObservable = params['value'];
                    // Replace the 'value' field in the options object with the actual value
                    params['value'] = ko.unwrap(valueObservable);
                    $(element).slider(params);
                }

                // Make sure we update the observable when changing the slider value
                $(element).on('slide', function (ev) {
                    valueObservable(ev.value);
                });

            },
            update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                var modelValue = valueAccessor();
                var valueObservable;
                if (ko.isObservable(modelValue))
                    valueObservable = modelValue;
                else
                    valueObservable = modelValue['value'];

                $(element).slider('setValue', parseFloat(valueObservable()));
            }
        };
    });
</script>